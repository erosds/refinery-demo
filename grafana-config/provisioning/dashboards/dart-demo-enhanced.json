{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "P40AE60E18F02DE32"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 2,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "line"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 40
              },
              {
                "color": "yellow",
                "value": 45
              },
              {
                "color": "green",
                "value": 50
              }
            ]
          },
          "unit": "dmm",
          "min": 35,
          "max": 65
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Target"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "red",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.lineStyle",
                "value": {
                  "dash": [10, 10],
                  "fill": "dash"
                }
              },
              {
                "id": "custom.lineWidth",
                "value": 3
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 16,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": ["lastNotNull"],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "hideZeros": false,
          "mode": "multi",
          "sort": "none"
        }
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "P40AE60E18F02DE32"
          },
          "editorMode": "code",
          "format": "time_series",
          "rawQuery": true,
          "rawSql": "SELECT \\n    p.timestamp as time,\\n    p.bit_tq as \\\"BIT-TQ Attuale\\\",\\n    50 as \\\"Target\\\",\\n    CASE \\n        WHEN p.data_source = 'ai_control' THEN p.bit_tq\\n        ELSE NULL\\n    END as \\\"AI Control\\\"\\nFROM process_data p\\nWHERE $__timeFilter(p.timestamp) \\nORDER BY p.timestamp ASC",
          "refId": "A"
        }
      ],
      "title": "🎯 BIT-TQ Penetrazione Bitume (Target: 50 dmm)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "-"
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 16,
        "y": 0
      },
      "id": 9,
      "options": {
        "content": "<div style=\\\"background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 20px; border-radius: 10px; text-align: center; height: 100%; display: flex; flex-direction: column; justify-content: space-around;\\\">\\n\\n<h2 style=\\\"color: white; margin: 0;\\\">🤖 AI Control Panel</h2>\\n\\n<div style=\\\"background: rgba(255,255,255,0.1); padding: 15px; border-radius: 8px; margin: 10px 0;\\\">\\n<h3 style=\\\"color: white; margin: 0 0 10px 0;\\\">Latest AI Decision</h3>\\n<div id=\\\"ai-decision-info\\\" style=\\\"color: #f0f0f0; font-size: 14px;\\\">\\nLoading...\\n</div>\\n</div>\\n\\n<div style=\\\"display: flex; gap: 10px; justify-content: center;\\\">\\n<button id=\\\"apply-ai-btn\\\" onclick=\\\"applyAIDecision()\\\" style=\\\"\\n    background: linear-gradient(45deg, #4CAF50, #45a049);\\n    color: white;\\n    border: none;\\n    padding: 12px 20px;\\n    border-radius: 25px;\\n    cursor: pointer;\\n    font-weight: bold;\\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\\n    transition: all 0.3s ease;\\n    flex: 1;\\n\\\" onmouseover=\\\"this.style.transform='scale(1.05)'\\\" onmouseout=\\\"this.style.transform='scale(1)'\\\">\\n✨ Apply AI Decision\\n</button>\\n\\n<button id=\\\"reset-btn\\\" onclick=\\\"resetToHuman()\\\" style=\\\"\\n    background: linear-gradient(45deg, #ff6b6b, #ff5252);\\n    color: white;\\n    border: none;\\n    padding: 12px 20px;\\n    border-radius: 25px;\\n    cursor: pointer;\\n    font-weight: bold;\\n    box-shadow: 0 4px 8px rgba(0,0,0,0.2);\\n    transition: all 0.3s ease;\\n    flex: 1;\\n\\\" onmouseover=\\\"this.style.transform='scale(1.05)'\\\" onmouseout=\\\"this.style.transform='scale(1)'\\\">\\n🔄 Reset to Human\\n</button>\\n</div>\\n\\n<div id=\\\"status-message\\\" style=\\\"color: #f0f0f0; margin-top: 15px; font-size: 12px; min-height: 20px;\\\">\\nReady for AI optimization\\n</div>\\n\\n</div>\\n\\n<script>\\nlet apiBaseUrl = 'http://localhost:5000/api';\\n\\nasync function loadLatestDecision() {\\n    try {\\n        const response = await fetch(`${apiBaseUrl}/ai-decisions/latest`);\\n        const data = await response.json();\\n        \\n        const infoDiv = document.getElementById('ai-decision-info');\\n        \\n        if (data.success && data.decision) {\\n            const decision = data.decision;\\n            infoDiv.innerHTML = `\\n                <div style=\\\"text-align: left;\\\">\\n                    <strong>Predicted BIT-TQ:</strong> ${decision.predicted_bit_tq.toFixed(1)} dmm<br>\\n                    <strong>Confidence:</strong> ${(decision.confidence * 100).toFixed(0)}%<br>\\n                    <strong>Energy Saving:</strong> ${(decision.predicted_energy_saving * 100).toFixed(1)}%<br>\\n                    <strong>CO2 Reduction:</strong> ${(decision.predicted_co2_reduction * 100).toFixed(1)}%\\n                </div>\\n            `;\\n            document.getElementById('apply-ai-btn').disabled = false;\\n        } else {\\n            infoDiv.innerHTML = '<em>No pending AI decisions</em>';\\n            document.getElementById('apply-ai-btn').disabled = true;\\n        }\\n    } catch (error) {\\n        console.error('Error loading AI decision:', error);\\n        document.getElementById('ai-decision-info').innerHTML = '<em>API connection failed</em>';\\n    }\\n}\\n\\nasync function applyAIDecision() {\\n    const btn = document.getElementById('apply-ai-btn');\\n    const statusDiv = document.getElementById('status-message');\\n    \\n    btn.disabled = true;\\n    btn.innerHTML = '⏳ Applying...';\\n    statusDiv.innerHTML = 'Applying AI optimization to OPC-UA server...';\\n    \\n    try {\\n        const response = await fetch(`${apiBaseUrl}/ai-decisions/apply`, {\\n            method: 'POST',\\n            headers: {\\n                'Content-Type': 'application/json'\\n            }\\n        });\\n        \\n        const data = await response.json();\\n        \\n        if (data.success) {\\n            statusDiv.innerHTML = `✅ AI decision applied successfully! Predicted BIT-TQ: ${data.predicted_bit_tq.toFixed(1)} dmm`;\\n            statusDiv.style.color = '#4CAF50';\\n            \\n            setTimeout(() => {\\n                loadLatestDecision();\\n                statusDiv.style.color = '#f0f0f0';\\n                statusDiv.innerHTML = 'AI optimization active - monitoring results...';\\n            }, 3000);\\n        } else {\\n            statusDiv.innerHTML = `❌ Failed: ${data.message}`;\\n            statusDiv.style.color = '#ff6b6b';\\n        }\\n    } catch (error) {\\n        statusDiv.innerHTML = `❌ Error: ${error.message}`;\\n        statusDiv.style.color = '#ff6b6b';\\n    } finally {\\n        btn.disabled = false;\\n        btn.innerHTML = '✨ Apply AI Decision';\\n        \\n        setTimeout(() => {\\n            statusDiv.style.color = '#f0f0f0';\\n        }, 5000);\\n    }\\n}\\n\\nasync function resetToHuman() {\\n    const btn = document.getElementById('reset-btn');\\n    const statusDiv = document.getElementById('status-message');\\n    \\n    btn.disabled = true;\\n    btn.innerHTML = '⏳ Resetting...';\\n    statusDiv.innerHTML = 'Resetting to human control...';\\n    \\n    try {\\n        const response = await fetch(`${apiBaseUrl}/process/reset`, {\\n            method: 'POST',\\n            headers: {\\n                'Content-Type': 'application/json'\\n            }\\n        });\\n        \\n        const data = await response.json();\\n        \\n        if (data.success) {\\n            statusDiv.innerHTML = '✅ Process reset to human control';\\n            statusDiv.style.color = '#4CAF50';\\n            \\n            setTimeout(() => {\\n                loadLatestDecision();\\n                statusDiv.style.color = '#f0f0f0';\\n                statusDiv.innerHTML = 'Ready for AI optimization';\\n            }, 3000);\\n        } else {\\n            statusDiv.innerHTML = `❌ Reset failed: ${data.message}`;\\n            statusDiv.style.color = '#ff6b6b';\\n        }\\n    } catch (error) {\\n        statusDiv.innerHTML = `❌ Error: ${error.message}`;\\n        statusDiv.style.color = '#ff6b6b';\\n    } finally {\\n        btn.disabled = false;\\n        btn.innerHTML = '🔄 Reset to Human';\\n        \\n        setTimeout(() => {\\n            statusDiv.style.color = '#f0f0f0';\\n        }, 5000);\\n    }\\n}\\n\\nloadLatestDecision();\\nsetInterval(loadLatestDecision, 10000);\\n</script>",
        "mode": "html"
      },
      "pluginVersion": "11.3.0",
      "title": "AI Control Panel",
      "type": "text"
    }
  ],
  "preload": false,
  "refresh": "5s",
  "schemaVersion": 41,
  "tags": ["demo", "ai", "refinery"],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Demo - Refinery AI Analytics Enhanced",
  "uid": "dashboard-demo-refinery-enhanced",
  "version": 1
}
